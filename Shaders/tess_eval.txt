#version 460 core
layout (quads, equal_spacing, ccw) in;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 projector_view;

uniform float time;

out vec3 normal;
out vec2 texCoord;
out vec3 fragPosWorld;



vec4 interpolate(vec4 v0, vec4 v1, vec4 v2, vec4 v3) {
    vec4 a = mix(v0, v1, gl_TessCoord.x);
    vec4 b = mix(v3, v2, gl_TessCoord.x);
    return mix(a, b, gl_TessCoord.y);
}


bool intersectSegmentWithXZPlane(vec3 p0, vec3 p1, float planeY, out vec3 contactPoint) {
    vec3 dir = p1 - p0;

    // Avoid division by zero (segment is parallel to the XZ plane)
    if (abs(dir.y) < 1e-6) {
        return false;
    }

    float t = (planeY - p0.y) / dir.y;

    // Check if t is within the segment bounds
    if (t >= 0.0 && t <= 1.0) {
        contactPoint = p0 + t * dir;
        return true;
    }

    return false;
}


void main() {
    

   // Step 1: Current position
    vec4 mixPos = interpolate(
        gl_in[0].gl_Position,
        gl_in[1].gl_Position,
        gl_in[2].gl_Position,
        gl_in[3].gl_Position
    );
    vec2 uv = mixPos.xy;

    // Step 1.5: Projected Grid
    mat4 m_Projection = inverse(projector_view * projection);
    vec4 mix_pOne = m_Projection * vec4(mixPos.x, mixPos.y, 1, 1);
    vec4 mix_pTwo = m_Projection * vec4(mixPos.x, mixPos.y, -1, 1);
    vec3 contact;

    if(intersectSegmentWithXZPlane(mix_pOne.xyz , mix_pTwo.xyz, 1,  contact))
        mixPos = vec4(contact, 1.0);  
    else
        mixPos = vec4(0,0,0,1);
    
    gl_Position = projection * view * mixPos;
}