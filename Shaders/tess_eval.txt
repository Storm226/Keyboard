#version 460 core
layout (quads, equal_spacing, ccw) in;

uniform mat4 view;
uniform mat4 projection;
uniform float time;

out vec3 normal;
out vec2 texCoord;
out vec3 fragPosWorld;


// GLSL Classic Perlin 2D Noise
vec4 permute(vec4 x) {
    return mod(((x*34.0)+1.0)*x, 289.0);
}

vec2 fade(vec2 t) {
    return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float perlinNoise(vec2 P) {
    vec4 Pi = floor(vec2(P.x, P.y).xyxy) + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 Pf = fract(vec2(P.x, P.y).xyxy) - vec4(0.0, 0.0, 1.0, 1.0);

    Pi = mod(Pi, 289.0); // To avoid wrapping
    vec4 ix = Pi.xzxz;
    vec4 iy = Pi.yyww;
    vec4 fx = Pf.xzxz;
    vec4 fy = Pf.yyww;

    vec4 i = permute(permute(ix) + iy);

    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0;
    vec4 gy = abs(gx) - 0.5;
    vec4 tx = floor(gx + 0.5);
    gx = gx - tx;

    vec2 g00 = vec2(gx.x, gy.x);
    vec2 g10 = vec2(gx.y, gy.y);
    vec2 g01 = vec2(gx.z, gy.z);
    vec2 g11 = vec2(gx.w, gy.w);

    vec4 norm = 1.79284291400159 - 0.85373472095314 * 
        vec4(dot(g00,g00), dot(g10,g10), dot(g01,g01), dot(g11,g11));
    g00 *= norm.x;
    g10 *= norm.y;
    g01 *= norm.z;
    g11 *= norm.w;

    float n00 = dot(g00, vec2(fx.x, fy.x));
    float n10 = dot(g10, vec2(fx.y, fy.y));
    float n01 = dot(g01, vec2(fx.z, fy.z));
    float n11 = dot(g11, vec2(fx.w, fy.w));

    vec2 fade_xy = fade(vec2(Pf.x, Pf.y));
    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);

    return 2.3 * n_xy;
}

vec3 getDisplacedPosition(vec2 uv) {
    float freq = 1.0;
    float amp = 1.0;
    float alpha = 0.5;
    float displacement = 0.0;
    float persistance = 0.5;

    for (int i = 0; i < 5; ++i) {
        vec2 animatedUV = uv * freq * 0.2 + vec2(time * 0.1);
        displacement += perlinNoise(animatedUV) * amp;
        freq *= 2.0;
        amp *= persistence;
    }

    return vec3(uv.x, displacement * 0.1, uv.y); // note: uv = xz
}

vec4 interpolate(vec4 v0, vec4 v1, vec4 v2, vec4 v3) {
    vec4 a = mix(v0, v1, gl_TessCoord.x);
    vec4 b = mix(v3, v2, gl_TessCoord.x);
    return mix(a, b, gl_TessCoord.y);
}

void main() {
   // Step 1: Current position
    vec4 mixPos = interpolate(
        gl_in[0].gl_Position,
        gl_in[1].gl_Position,
        gl_in[2].gl_Position,
        gl_in[3].gl_Position
    );
    vec2 uv = mixPos.xz;
    vec3 pos = getDisplacedPosition(uv);

    // Step 2: Offsets
    float eps = 0.1;
    vec3 pos_dx = getDisplacedPosition(uv + vec2(eps, 0.0));
    vec3 pos_dz = getDisplacedPosition(uv + vec2(0.0, eps));

    // Step 3: Tangents
    vec3 tangent_x = pos_dx - pos;
    vec3 tangent_z = pos_dz - pos;

    // Step 4: Normal = cross(tangents)
    vec3 normalVec = normalize(cross(tangent_z, tangent_x));
    normal = normalVec;

    texCoord = mixPos.xz * 0.5 + 0.5; // remap from [-1,1] to [0,1]

    // Step 5: Final displaced position
    mixPos.y = pos.y;
    fragPosWorld = mixPos.xyz;

    gl_Position = projection * view * mixPos;
}